<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.taiger.iconverse-ui</groupId>
    <artifactId>iconverse-ui</artifactId>
    <version>2.2.5</version>
    <packaging>pom</packaging>
    <name>iconverse-ui</name>
    <description>iConverse UI</description>
    <properties>
        <awsAccountId>701969852130</awsAccountId>        
        <docker.image.prefix>701969852130.dkr.ecr.ap-southeast-1.amazonaws.com</docker.image.prefix>
    </properties>
    <dependencies>
    </dependencies>
    <repositories>
        <repository>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
    </repositories>
    <build>
        <extensions>
            <extension>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-extension</artifactId>
                <version>1.4.9</version>
            </extension>
        </extensions>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.6</version>
                <executions>
                    <!--
                    Install Node and NPM
                    Note: we need npm to have access to the command `npm rebuild node-sass`
                    -->
                    <execution>
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <configuration>
                            <nodeVersion>v9.0.0</nodeVersion>
                        </configuration>
                    </execution>

                    <!--
                    Install Node and Yarn
                     Note: Since Node was already installed in the previous step, it will not be downloaded
                     We want to use Yarn instead of NPM to download node dependencies as it is significantly faster
                    -->
                    <execution>
                        <id>install node and yarn</id>
                        <goals>
                            <goal>install-node-and-yarn</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <nodeVersion>v9.0.0</nodeVersion>
                            <yarnVersion>v1.6.0</yarnVersion>
                        </configuration>
                    </execution>

                    <execution>
                        <id>yarn install</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <phase>generate-resources</phase>
                    </execution>
                    <!--
                    Rebuild node-sass bindings, to prevent errors due to node environment changes
                    this makes our build process less reliant on the environment (better for CI)

                    TO MAKE SURE WE NEVER HAVE TO RUN THIS ON THE CI SERVER (save build times)
                    WE SHOULD ENSURE THAT THE SERVER'S NODE VERSION DOES NOT CHANGE BETWEEN BUILDS
                    -->
                     <!-- <execution>
                        <id>npm rebuild node-sass</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
                            <arguments>rebuild node-sass</arguments>
                        </configuration>
                    </execution> -->
                    <execution>
                        <id>gulp build</id>
                        <goals>
                            <goal>gulp</goal>
                        </goals>
                        <phase>generate-resources</phase>
                         <configuration>
                            <!-- optional: if not specified, it will run gulp's default
                            task (and you can remove this whole <configuration> section.) -->
                            <arguments>build</arguments>
                         </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>prod</id>
            <build>
            <plugins>
<!--                     <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>dockerfile-maven-plugin</artifactId>
                        <version>1.4.9</version>
                        <executions>
                            <execution>
                                <id>build-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>tag-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>tag</goal>
                                </goals>
                                <configuration>
                                    <tag>${project.version}</tag>
                                </configuration>
                            </execution>
                             <execution>
                                <id>push-version</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                                <configuration>
                                    <tag>${project.version}</tag>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-latest</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                                <configuration>
                                    <tag>latest</tag>
                                </configuration>
                            </execution>
                         </executions>
                        <configuration>
                            <imageName>${project.artifactId}</imageName>
                            <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
                            <resources>
								<resource>
									<targetPath>/</targetPath>
									<directory>${project.build.directory}</directory>
									<include>target/${project.build.finalName}.jar</include>
								</resource>
							</resources>
                            <repository>${awsAccountId}.dkr.ecr.ap-southeast-1.amazonaws.com/${project.name}</repository>
                            <useMavenSettingsForAuth>true</useMavenSettingsForAuth>
                            <buildArgs>
                                <JAR_FILE>target/${project.build.finalName}.war</JAR_FILE>
                            </buildArgs>
                        </configuration>
                    </plugin> -->
            </plugins>
            </build>
        </profile>
    </profiles>
</project>
